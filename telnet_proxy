from Queue import Queue
import socket, threading
import telnetlib
import time
import re
from multiprocessing import Lock

""" Change the device host and port name to your liking
"""

device_host = 'localhost'
device_port = 4096

mutex = Lock()

workers = 1024
ts = dict()
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind(('', 2048))
s.listen(1)

device_queue = Queue()
client_queue = Queue()
prompt_queue = Queue()


class TelnetServer(threading.Thread):
    def __init__(self, (s, address)):
        threading.Thread.__init__(self)
        self.welcome_message = 'Welcome to Telnet Proxy Server\n'
        self.socket = s
        self.address = address
        self.peer = self.socket.getpeername()
        print('Telnet Proxy Server: Client connected (%s:%s)' % (self.peer[0], self.peer[1]))

    def run(self):
        try:
            # display welcome message
            prompt = prompt_queue.get()
            prompt_queue.put(prompt)
            self.socket.send(self.welcome_message)
            self.socket.send(prompt)
        except Exception as error:
            print(error)

        no_error = True
        while no_error:
            peer = self.socket.getpeername()
            data = self.socket.recv(1024)
            time_out = time.time() + 5
            device_queue.put({'data': data, 'source': peer, 'time_out': time_out})
            stop = False
            while time.time() < time_out and stop is False:
                try:
                    if not client_queue.empty():
                        response = client_queue.get()
                        if response['source'] == peer:
                            data = response['data']
                            for line in data:
                                self.socket.send(line)
                            stop = True
                        else:
                            mutex.acquire()
                            client_queue.put(response)
                            mutex.release()
                    time.sleep(0.01)
                except Exception as error:
                    pass
            else:
                if stop is not True:
                    no_error = False

    def purge_queue(self):
        seen = False
        print('Purge queue for: %s:%s' % (self.peer[0], self.peer[1]))
        while not seen:
            if not client_queue.empty():
                mutex.acquire()
                response = client_queue.get()
                mutex.release()
                if 'seen' in response:
                    seen = True
                if response['source'] != self.peer:
                    response['seen'] = True
                    mutex.acquire()
                    client_queue.put(response)
                    mutex.release()
            else:
                seen = True
        else:
            print('purge done for %s:%s' % (self.peer[0], self.peer[1]))


class TelnetProxy:
    def __init__(self, host, port, debug=False):
        self.debug = debug
        self.connection = None
        self.host = host
        self.port = port
        thread = threading.Thread(target=self.run)
        thread.start()

        while True:
            time.sleep(2)
            try:
                if thread.is_alive() is False:
                    thread = threading.Thread(target=self.run)
                    thread.start()
            except AttributeError:
                pass

    def connect(self):
        """
        Create a telnet connection to the VRT71

        :return: Void
        """

        try:
            if self.connection:
                self.disconnect()
            self.connection = telnetlib.Telnet(host=self.host, port=self.port, timeout=5)
        except Exception as error:
            if self.debug:
                print(error)

    def disconnect(self):
        """
        Disconnect connection to the VRT71

        :return: Void
        """

        try:
            if self.connection is not None:
                self.connection.close()
            self.connection = None
        except Exception as error:
            if self.debug:
                print(error)

    def run(self):
        while True:
            try:
                if not self.connection:
                    self.connect()
                    data = self.connection.read_until('xyz', timeout=3)
                    prompt = data.split('\n')[-1:][0]
                    prompt_queue.put(prompt)
                elif not device_queue.empty():
                    queue_item = device_queue.get_nowait()
                    if time.time() - queue_item['time_out'] < 0:
                        self.connection.write(queue_item['data'])
                        data = self.connection.expect([r'> '])
                        data = re.split('(\r\n)', data[2])
                        if time.time() - queue_item['time_out'] < 0:
                            mutex.acquire()
                            client_queue.put({'data': data, 'source': queue_item['source']})
                            mutex.release()
                time.sleep(0.01)
            except Exception as error:
                print(error)
                self.disconnect()
                break


def start_telnet_server(identifier):
    while True:
        try:
            ts[identifier] = TelnetServer(s.accept())
            ts[identifier].run()
        except Exception as error:
            print('Caught error in start_telnet_server: %s' % error)

        try:
            ts[identifier].purge_queue()
        except Exception as error:
            print('Caught error in purging client_queue for peer: %s:%s' % (ts[identifier].peer[0],
                                                                            ts[identifier].peer[1]))
        ts[identifier] = None


def start_proxy():
    # Make a connection with the telnet device (could be any device e.g. an ACU)
    threading.Thread(target=TelnetProxy, args=(device_host, device_port),).start()

    # Spawn multiple telnet listeners for clients who like to connect
    print('Telnet Proxy server:')
    for i in range(0, workers):
        print ('\rSpawn client: %s/%s' % (i + 1, workers)),
        threading.Thread(target=start_telnet_server, args=(i,)).start()


if __name__ == "__main__":
    start_proxy()
