from Queue import Queue
import socket, threading
import telnetlib
from telnetlib import IAC, NOP
import time
import re

workers = 1024
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind(('', 2048))
s.listen(3)

device_queue = Queue()
client_queue = Queue()
prompt_queue = Queue()


class TelnetServer(threading.Thread):
    def __init__(self, (s, address)):
        self.welcome_message = 'Welcome to Telnet Proxy Server\n'
        threading.Thread.__init__(self)
        self.socket = s
        self.address = address
        peer = self.socket.getpeername()

        print('ACU-Mock Server: Client connected (%s)\nWelcome to ACU-Mock Server' % peer[0])

    def run(self):
        # display welcome message
        prompt = prompt_queue.get()
        prompt_queue.put(prompt)
        self.socket.send(self.welcome_message)
        self.socket.send(prompt)

        while True:
            try:
                peer = self.socket.getpeername()
                data = self.socket.recv(1024)
                time_out = time.time() + 10
                device_queue.put({'data': data, 'source': peer, 'time_out': time_out})
                stop = False
                while time.time() < time_out and stop is False:
                    try:
                        if not client_queue.empty():
                            response = client_queue.get()
                            if response['source'] == peer:
                                data = response['data']
                                for line in data:
                                    self.socket.send(line)
                                stop = True
                            else:
                                client_queue.put_nowait(response)
                    except Exception as error:
                        pass
                    time.sleep(0.1)
                else:
                    if stop is not True:
                        self.socket.send('Connection error\r\n')
                        self.socket.send(prompt)
            except:
                print('Client disconnected')
                return


class TelnetProxy:
    def __init__(self, host, port, debug=False):
        self.debug = debug
        self.connection = None
        self.host = host
        self.port = port
        thread = threading.Thread(target=self.run)
        thread.start()
        while True:
            try:
                if thread.is_alive() is False:
                    self.connect()
                    thread = threading.Thread(target=self.run).start()
                else:
                    time.sleep(1)
            except AttributeError:
                pass

    def connect(self):
        """
        Create a telnet connection to the VRT71

        :return: Void
        """

        try:
            if self.connection:
                self.disconnect()
            self.connection = telnetlib.Telnet(host=self.host, port=self.port, timeout=5)
        except Exception as error:
            if self.debug:
                print(error)

    def disconnect(self):
        """
        Disconnect connection to the VRT71

        :return: Void
        """

        try:
            if self.connection is not None:
                self.connection.close()
            self.connection = None
        except Exception as error:
            if self.debug:
                print(error)

    def is_alive(self):
        try:
            if self.connection.sock:  # this way I've taken care of problem if the .close() was called
                self.connection.sock.send(IAC + NOP)  # notice the use of send instead of sendall
                self.connection.read_until('xyz', timeout=1)
                return True
        except:
            pass

    def run(self):
        prompt = str()
        no_prompt = False
        while True:
            try:
                if not self.connection:
                    self.connect()
                    data = self.connection.read_until('xyz', timeout=3)
                    prompt = data.split('\n')[-1:][0]
                    if prompt == '':
                        no_prompt = True
                    prompt_queue.put(prompt)
                elif not device_queue.empty():
                    queue_item = device_queue.get()
                    self.connection.write(queue_item['data'])
                    if no_prompt:
                        data = self.connection.read_until('xyz', timeout=1)
                    else:
                        data = self.connection.expect([r'%s' % prompt])
                        data = re.split('(\r\n)', data[2])
                    if time.time() - queue_item['time_out'] < 0:
                        client_queue.put({'data': data, 'source': queue_item['source']})
                time.sleep(0.1)
            except Exception as error:
                if not self.is_alive():
                    self.disconnect()


def start_telnet_server():
    while True:
        mts = TelnetServer(s.accept())
        mts.run()


def start_proxy():
    # Make a connection with the telnet device (could be any device e.g. an ACU)
    threading.Thread(target=TelnetProxy, args=('localhost', 4096),).start()

    # Spawn multiple telnet listeners for clients who like to connect
    print('Telnet Proxy server:')
    for i in range(0, workers):
        print ('\rSpawn client: %s/%s' % (i + 1, workers)),
        threading.Thread(target=start_telnet_server).start()


if __name__ == "__main__":
    start_proxy()
